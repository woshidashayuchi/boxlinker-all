// Code generated by go-bindata.
// sources:
// db/migrations/1_initial_schema.sql
// DO NOT EDIT!

package building

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x4d\x8f\xd3\x30\x10\xbd\xe7\x57\x3c\xed\xa5\x8d\xa0\x20\x24\x6e\x15\x87\x42\xbd\x10\x29\x4a\x21\x1f\xda\xbd\x45\x6e\x32\x4d\x2c\x12\x3b\xeb\xd8\x2d\xe1\xd7\xe3\xa4\x1f\x5a\xb5\x88\x5e\xb8\x39\x6f\xde\xcc\x7b\xf3\x91\xc5\x02\x6f\x5a\x51\x69\x6e\x08\x59\xe7\x7d\x89\xd9\x2a\x65\x60\xcf\x29\x8b\x92\x60\x13\x21\x78\x44\xb4\x49\x1d\x10\x24\x69\x82\xba\x37\x4a\xd3\xf2\x1e\xed\xc1\x5a\x51\x2e\x54\xdf\x77\x0f\x4b\xef\x4c\x4e\x57\x9f\x43\x86\xad\x15\x4d\xd9\x63\xee\x01\xa2\xc4\xc8\x9b\x12\xa3\x2c\x0c\xb1\x66\x8f\xab\x2c\x4c\x27\x34\xaf\x48\xd2\xe8\x2a\xdf\x7f\x9c\xfb\xe8\xb4\x68\xb9\x1e\xf0\x93\x86\xb7\x2e\xb5\xa7\x17\x24\x2c\x0e\x56\xe1\xf8\xa5\xa9\x53\xbd\x70\xce\x06\x18\xfa\x65\x2e\x05\xc7\xd8\x56\x73\x59\xd4\x13\x3e\x25\xd6\xfc\x96\xd3\x9b\xb1\xfb\x1b\xb8\xd0\xe4\xf0\x32\xe7\x06\x46\xb4\xe4\x58\x6d\x87\x83\x30\xb5\xb2\x47\x04\xbf\x95\x24\x94\xb4\xe3\xb6\x31\x98\x4b\x75\x70\x4e\xf9\xeb\xd8\xcc\x9a\x62\xe6\x5f\x8b\xe9\xfb\x55\x27\x7d\xd5\x76\x0d\xdd\xe7\x7a\xfe\xf5\x90\x9d\x82\xd8\xf1\xc2\xfc\xe7\x39\x4f\xbb\xcb\x6f\xca\x69\xda\x91\x26\x59\x50\x7f\xda\xee\x5c\x94\xfe\xc8\x77\xa5\xaa\xbf\xcc\xf5\x5f\xeb\xba\xd9\xcf\xd4\x9c\x3b\xd2\x27\x72\x31\x65\x9b\x12\x24\x7b\xab\x5d\xd9\xda\x4d\xe5\x40\x50\xb2\x19\x50\xf3\x3d\xe1\x03\x3a\x92\xa5\x90\xd5\xfb\xc9\x86\x7b\x1c\xfd\x60\xa7\x34\xb8\x1c\x50\x89\x3d\xc9\x51\xe2\xdd\x79\x5c\x59\x14\xfc\xc8\x18\x82\x68\xcd\x9e\x61\xa5\x78\xb1\x94\x1f\x73\xdc\x4d\x9f\x4e\x35\x4b\x82\xe8\x2b\xb6\x46\x13\x61\xee\x92\x7d\x3c\x7d\x63\x31\x73\xef\xe9\x6c\x3e\x61\x76\x96\x9b\x61\x13\xe3\x82\x9e\xcc\xcc\x4e\x0d\x5c\xfe\xb2\xb5\x3a\x48\x6f\x1d\x6f\xbe\x5f\x2f\x6b\xf9\x1a\x3d\x8a\x2f\xbd\x3f\x01\x00\x00\xff\xff\x6a\xfc\x18\x52\xa0\x03\x00\x00")

func dbMigrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations1_initial_schemaSql,
		"db/migrations/1_initial_schema.sql",
	)
}

func dbMigrations1_initial_schemaSql() (*asset, error) {
	bytes, err := dbMigrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/1_initial_schema.sql", size: 928, mode: os.FileMode(420), modTime: time.Unix(1454381849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/1_initial_schema.sql": dbMigrations1_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial_schema.sql": &bintree{dbMigrations1_initial_schemaSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

